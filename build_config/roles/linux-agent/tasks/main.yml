---
# tasks file for linux-agent
- name: Update base system packages
  apt:
    name: "{{ item }}"
    state: latest
    force_apt_get: true
    update_cache: true
  loop: "{{ system_packages }}"

- name: download scripts and place them in path
  get_url:
    url: "{{ item.url }}"
    dest: /tmp
    mode: '0555'
    force: yes
  loop: "{{ install_scripts }}"

- name: Get sha256 sum of script
  stat:
    path: /tmp/{{ item.url.split('/') | last }}
    checksum_algorithm: sha256
    get_checksum: yes
  register: shasum_stat
  loop: "{{ install_scripts }}"

- name: Verify sha256sum of script before execution.
  fail:
    msg: "Failure, file /tmp/{{ item.url.split('/') | last }} is not correct."
  when: item[1].stat.checksum != "{{ item[0].checksum }}"
  with_together: 
  - "{{ install_scripts }}"
  - "{{ shasum_stat.results }}"

- name: install scripts
  ansible.builtin.command:
    argv:
      - bash
      - /tmp/{{ item.url.split('/') | last }}
      - "{{ item.installation_arg }}"
  args:
    chdir: /tmp
  loop: "{{ install_scripts }}"

- name: install scripts that have been downloaded
  get_url:
    url: "{{ item.url }}"
    dest: /tmp
    mode: '0555'
    force: yes
  loop: "{{ install_scripts }}"

- name: download binaries and place them in path
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dst_folder }}"
    mode: '0555'
    force: yes
  loop: "{{ download_binaries }}"

- name: download packages that are compiled from source
  get_url:
    url: "{{ item.url }}"
    dest: /tmp/
    mode: '0440'
  loop: "{{ install_from_source }}"

  # --- find deb packages
- find:
    paths: /tmp
    patterns: "*.deb"
  register: deb_packages

- debug:
    msg: "No deb packages found in /tmp"
  when: deb_packages.matched == 0

- debug:
    msg: "Deb file found: {{ item.path }}"
  loop: "{{ deb_packages.files }}"
  
- find:
    paths: /tmp
    patterns: "*.tgz"
  register: tarballs

# --- find deb packages
- debug:
    msg: "No tgz files found in /tmp"
  when: tarballs.matched == 0

- debug:
    msg: "tgz file found: {{ item.path }}"
  loop: "{{ tarballs.files }}"

# --- perform actions on deb files
- name: dpkg install packages
  ansible.builtin.command:
    argv:
      - dpkg
      - -i 
      - "{{ item.path }}"
  args:
    chdir: "/tmp"
  loop: "{{ deb_packages.files }}"
  loop_control:
    index_var: index

# --- perform actions on different downloaded files
- name: create unpacking destination folders
  file:
    path: "/tmp/{{ index }}"
    state: directory
  loop: "{{ tarballs.files }}"
  loop_control:
    index_var: index

- name: unpack tarballs before compiling from source
  ansible.builtin.unarchive:
    src: "{{ item.path }}"
    dest: "/tmp/{{ index }}"
    remote_src: yes
    extra_opts: [--strip-components=1]
  loop: "{{ tarballs.files }}"
  loop_control:
    index_var: index

- name: compile packages
  ansible.builtin.command:
    argv:
      - ./configure 
      - --enable-optimizations
  args:
    chdir: "/tmp/{{ index }}"
  loop: "{{ tarballs.files }}"
  loop_control:
    index_var: index

- name: make packages
  ansible.builtin.command:
    argv:
      - make 
      - altinstall
  args:
    chdir: "/tmp/{{ index }}"
  loop: "{{ tarballs.files }}"
  loop_control:
    index_var: index

- name: Print return information from the previous task
  ansible.builtin.debug:
    var: install_gpg
    verbosity: 2

- name: Install gpg keys
  ansible.builtin.apt_key:
    url: "{{ item.url }}"
    state: present
    keyring: "{{ item.keyring }}"
  loop: "{{ install_gpg }}"

- name: Add repositories
  ansible.builtin.apt_repository:
    repo: "{{ item.content }}"
    filename: "{{ item.filename }}"
    state: present
  loop: "{{ install_repositories }}"

- name: Install remaining packages
  apt:
    name: "{{ item.name }}"
    state: present
    force_apt_get: true
    update_cache: true
  loop: "{{ install_apt_packages }}"
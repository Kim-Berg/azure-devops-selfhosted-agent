# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - main

pool:
  name: "Azure Pipelines"
  vmImage: 'ubuntu-20.04'

variables:
    # ------ Do change variables below --------
    # See "service connections" under Azure DevOps organization settings
    - name: service_connection
      value: 'azure-devops-demo-sp'

stages:
  - stage: SwapAndReplace
    jobs:
    - job: CreateImage
      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.10'
          addToPath: true
          architecture: 'x64'

      - script: python -m pip install --upgrade pip && python -m pip install -r $(Build.Repository.LocalPath)/requirements.txt
        displayName: 'Upgrade pip and install requirements.txt'

      - task: PythonScript@0
        displayName: 'Render all templates'
        inputs:
          scriptSource: 'filePath'
          scriptPath: '$(Build.Repository.LocalPath)/templater.py'

      - task: CmdLine@2
        displayName: 'print contents of all folders after templating'
        inputs:
          script: |
            ls -la $(Build.Repository.LocalPath)
            echo "---"
            ls -la $(Build.Repository.LocalPath)/build_config
            echo "---"
            ls -la $(Build.Repository.LocalPath)/packer
            echo "---"
            ls -la $(Build.Repository.LocalPath)/scripts

      - task: AzureCLI@2
        displayName: 'Register image definitions to gallery'
        inputs:
          azureSubscription: '$(service_connection)'
          scriptType: 'bash'
          scriptLocation: 'scriptPath'
          scriptPath: '$(Build.Repository.LocalPath)/scripts/pre-processor-img.sh'

      - task: riezebosch.Packer.PackerTool.PackerTool@0
        displayName: 'Use Packer Latest'

      - task: riezebosch.Packer.Packer.Packer@1
        displayName: 'Packer version'
        inputs:
          azureSubscription: '$(service_connection)'
          templatePath: '$(Build.Repository.LocalPath)/packer/azure-vmss.pkr.hcl'
          command: version

      - task: riezebosch.Packer.Packer.Packer@1
        displayName: 'Packer init'
        inputs:
          azureSubscription: '$(service_connection)'
          templatePath: '$(Build.Repository.LocalPath)/packer/azure-vmss.pkr.hcl'
          command: init

      - task: riezebosch.Packer.Packer.Packer@1
        displayName: 'Packer validate'
        inputs:
          azureSubscription: '$(service_connection)'
          templatePath: '$(Build.Repository.LocalPath)/packer/azure-vmss.pkr.hcl'
          command: validate
          variables: 'ansible_playbook_path=$(Build.Repository.LocalPath)/build_config'    

      - task: riezebosch.Packer.Packer.Packer@1
        displayName: 'Packer build'
        inputs:
          azureSubscription: '$(service_connection)'
          templatePath: '$(Build.Repository.LocalPath)/packer/azure-vmss.pkr.hcl'
          variables: 'ansible_playbook_path=$(Build.Repository.LocalPath)/build_config'
          force: true

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '$(Build.Repository.LocalPath)/manifest.json'
          includeRootFolder: true
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
          replaceExistingArchive: true

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'

# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - main

pool:
  name: "Azure Pipelines"
  vmImage: 'ubuntu-20.04'

variables:
    # ------ Do change variables below --------
    # See "service connections" under Azure DevOps organization settings
    - name: env
      value: dev

    - name: service_connection
      value: 'gold-partner-subscription'

    - name: location
      value: "westeurope"

    - group: 'service-connection-credentials'

stages:
  - stage: Build
    jobs:
    - job: CreateImage
      steps:
      - task: riezebosch.Packer.PackerTool.PackerTool@0
        displayName: 'Use Packer Latest'

      - task: riezebosch.Packer.Packer.Packer@1
        displayName: 'Packer version'
        inputs:
          azureSubscription: '$(service_connection)'
          templatePath: '$(Build.Repository.LocalPath)/images/AzureDevOps/ado-agents.pkr.hcl'
          command: version

      - task: riezebosch.Packer.Packer.Packer@1
        displayName: 'Packer init'
        inputs:
          azureSubscription: '$(service_connection)'
          templatePath: '$(Build.Repository.LocalPath)/images/AzureDevOps/ado-agents.pkr.hcl'
          command: init

      - task: riezebosch.Packer.Packer.Packer@1
        displayName: 'Packer validate'
        inputs:
          azureSubscription: '$(service_connection)'
          templatePath: '$(Build.Repository.LocalPath)/images/AzureDevOps/ado-agents.pkr.hcl'
          command: validate
          variables-file: '$(Build.Repository.LocalPath)/images/AzureDevOps/ado-agents.auto.pkrvars.hcl'
          variables: 'ansible_playbook_path=$(Build.Repository.LocalPath)/images/AzureDevOps/ansible'    

      - task: riezebosch.Packer.Packer.Packer@1
        displayName: 'Packer build'
        inputs:
          azureSubscription: '$(service_connection)'
          templatePath: '$(Build.Repository.LocalPath)/images/AzureDevOps/ado-agents.pkr.hcl'
          variables-file: '$(Build.Repository.LocalPath)/images/AzureDevOps/ado-agents.auto.pkrvars.hcl'
          variables: 'ansible_playbook_path=$(Build.Repository.LocalPath)/images/AzureDevOps/ansible'
          force: true

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.Repository.LocalPath)/images/AzureDevOps/manifest.json'
          ArtifactName: 'manifest'
          publishLocation: 'Container'

  - stage: Release
    jobs:
    - job: UpdateAdoVirtualMachineScaleSet
      steps:
      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'manifest'
          downloadPath: '$(Build.Repository.LocalPath)/'
      - task: CmdLine@2
        inputs:
          script: |
            function usage {
                echo "Usage: $0 [ -i <manifest path> ]" 1>&2; exit 1;
            }
            COLOUR='\033[1;32m' # Green
            NC='\033[0m' # No Color

            MANIFEST_PATH=$(Build.Repository.LocalPath)/manifest.json
            IMAGE_ID=$(jq '.builds[0].artifact_id' ${MANIFEST_PATH} | tr -d '"')
            VMSS_NAME=$(jq '.builds[0].custom_data.target_vmss_name' ${MANIFEST_PATH})
            VMSS_RG=$(jq '.builds[0].custom_data.target_vmss_rg' ${MANIFEST_PATH})
            
            printf "______ ${COLOUR}Current Settings${NC} ______\n"
            printf "MANIFEST_PATH..${COLOUR}${MANIFEST_PATH}${NC}\n"
            printf "IMAGE_ID.........${COLOUR}${IMAGE_ID}${NC}\n"
            printf "TARGET_VMSS......${COLOUR}${VMSS_NAME}${NC}\n"
            printf "TARGET_VMSS_RG...${COLOUR}${VMSS_RG}${NC}\n"
            
            if [[ -z ${MANIFEST_PATH} ]] || [[ -z ${IMAGE_ID} ]] || [[ -z ${VMSS_NAME} ]] || [[ -n ${VMSS_RG} ]]; then
            
                printf "re-image virtual machine scale set named ${VMSS_NAME}...\n"
                printf "az vmss update --resource-group ${VMSS_RG} --name ${VMSS_NAME} --set virtualMachineProfile.storageProfile.imageReference.id=${IMAGE_ID}\n"
                az vmss update --resource-group ${VMSS_RG} --name ${VMSS_NAME} --set virtualMachineProfile.storageProfile.imageReference.id=${IMAGE_ID}
            
                printf "updating running instances..."
                printf "az vmss update-instances --resource-group ${VMSS_RG} --name ${VMSS_NAME} --instance-ids \"*\"\n"
                az vmss update-instances --resource-group ${VMSS_RG} --name ${VMSS_NAME} --instance-ids "*"

            else
              usage
            fi

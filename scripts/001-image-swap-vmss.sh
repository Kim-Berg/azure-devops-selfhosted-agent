#!/bin/bash

# set -x 

# Metadata
#   description: Read and parse manifest file created by packer post-processor
#       This script is used as an inline script in the CI pipelines. The reason why it is kept here to for local debugging purposes.
#   creator: ben@kooijman.se
#   date: 2022-04-06

COLOUR='\033[1;32m' # Green
NC='\033[0m' # No Color

function usage {
    echo "Usage: $0 [ -u ] [ -i <manifest path> ]" 1>&2;
    echo "Options:" 1>&2;
    echo "   -i     path to manifest file generated by packer" 1>&2;
    echo "   -u     unattended (script will not ask for input)" 1>&2; exit 1;
}

function clean_blue_green_image {
    # 1 = image reference to delete
    printf "${COLOUR}Cleaning up blue green image...${NC}\n"
    printf "az image delete --ids ${1}\n"
    az image delete --ids "${1}"
    printf "${COLOUR}All done! :)${NC}\n"
}

function update_scale_set {
    # 1 = vmss name
    # 2 = vmss rg
    # 3 = image reference
    # 4 = blue green image reference
    printf "${COLOUR}Set scale set ${1} to newly built image...${NC}\n"
    printf "az vmss update --resource-group ${2} --name ${1} --set virtualMachineProfile.storageProfile.imageReference.id=${3}\n"
    az vmss update --resource-group ${2} --name ${1} --set virtualMachineProfile.storageProfile.imageReference.id=${3}
    if [[ $? -eq 0 ]]; then \
        printf "${COLOUR}updating running instances...${NC}\n"
        printf "az vmss update-instances --resource-group ${2} --name ${1} --instance-ids \"*\"\n"
        az vmss update-instances --resource-group ${2} --name ${1} --instance-ids '*'
    fi
}

while getopts "i:u" o; do
    case "${o}" in
        i)
            MANIFEST_PATH=${OPTARG}
            ;;
        u)
            UNATTENDED=true
            ;;
        *)
            usage
            ;;
    esac
done

if [[ -f ${MANIFEST_PATH} ]] && [[ ${MANIFEST_PATH} == *"blue"* ]]; then
    CURRENT_STAGE="first"
elif [[ -f ${MANIFEST_PATH} ]] && [[ ! ${MANIFEST_PATH} == *"green"* ]]; then
    CURRENT_STAGE="second"
else
    printf "ERROR: The current given manifest filepath does not exists: ${MANIFEST_PATH}\n"
    exit 1;
fi

IMAGE_ID=$(jq '.builds[0].artifact_id' ${MANIFEST_PATH} | tr -d '"')
VMSS_NAME=$(jq '.builds[0].custom_data.target_vmss_name' ${MANIFEST_PATH} | tr -d '"')
VMSS_RG=$(jq '.builds[0].custom_data.target_vmss_rg' ${MANIFEST_PATH} | tr -d '"')

printf "______ ${COLOUR}Current Settings${NC} ______\n"
printf "CURRENT_STAGE......${COLOUR}${CURRENT_STAGE}${NC}\n"
printf "MANIFEST_PATH......${COLOUR}${MANIFEST_PATH}${NC}\n"
printf "TARGET_VMSS........${COLOUR}${VMSS_NAME}${NC}\n"
printf "TARGET_VMSS_RG.....${COLOUR}${VMSS_RG}${NC}\n"
printf "IMAGE_ID...........${COLOUR}${IMAGE_ID}${NC}\n"

if [[ -z ${MANIFEST_PATH} ]] || [[ -z ${IMAGE_ID} ]] || [[ -z ${VMSS_NAME} ]] || [[ -n ${VMSS_RG} ]]; then
    if [[ ${UNATTENDED} ]]; then
        case ${CURRENT_STAGE} in
            "first")
                # change scale set to dummy image
                update_scale_set "${VMSS_NAME}" "${VMSS_RG}" "${IMAGE_ID}"
                ;;
            "second")
                # set scale set to the recently updated image
                update_scale_set "${VMSS_NAME}" "${VMSS_RG}" "${IMAGE_ID}"
                clean_blue_green_image "${IMAGE_ID}"
                ;;
        esac
    else
        # run script in interactive mode
        read -p "Do you wish to continue Yes/No? " yn
        while true; do
            case $yn in
                Yes )
                    case ${CURRENT_STAGE} in
                        "first")
                            # change scale set to dummy image
                            update_scale_set "${VMSS_NAME}" "${VMSS_RG}" "${IMAGE_ID}"
                            ;;
                        "second")
                            # set scale set to the recently updated image
                            update_scale_set "${VMSS_NAME}" "${VMSS_RG}" "${IMAGE_ID}"
                            clean_blue_green_image "${IMAGE_ID}"
                            ;;
                    esac
                    break;;
                No ) exit;;
            esac
        done
    fi
else
    usage
fi